#SNN model uses keras and tensorflow (cite: https://keras.io)
input = layers.Input((100, 1))
x = tf.keras.layers.BatchNormalization()(input)
x = layers.Conv1D(32, 3, padding='same', activation='relu')(x)
x = layers.MaxPooling1D()(x)
x = layers.Flatten()(x)
x = tf.keras.layers.BatchNormalization()(x)
x = layers.Dense(10, activation="tanh")(x)
input_1 = layers.Input((100, 1))
input_2 = layers.Input((100, 1))
ip1 = keras.Model(input, x)(input_1)
ip2 = keras.Model(input, x)(input_2)
lambdal = layers.Lambda(euclidean_distance)([ip1,ip2])
batchnorm = tf.keras.layers.BatchNormalization()(lambdal)
denselayer = layers.Dense(1, activation="sigmoid")(batchnorm)
siamese = keras.Model(inputs=[input_1,input_2], outputs=dense_layer)